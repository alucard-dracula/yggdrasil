//mongoc_native_err_ex.hpp

/****************************************************************************
Copyright (c) 2010-2024 yggdrasil

author: xu yang

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/

#ifndef __YGGR_NSQL_DATABASE_SYSTEM_MONGOC_NATIVE_EX_HPP__
#define __YGGR_NSQL_DATABASE_SYSTEM_MONGOC_NATIVE_EX_HPP__

#include <yggr/base/yggrdef.h>
#include <yggr/base/static_constant.hpp>
#include <yggr/nsql_database_system/mongodb_config.hpp>

namespace yggr
{
namespace nsql_database_system
{

struct mongoc_error_domain_ex_t
{
private:
	typedef mongoc_error_domain_ex_t this_type;

public:

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT = MONGOC_ERROR_CLIENT);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_STREAM = MONGOC_ERROR_STREAM);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_PROTOCOL = MONGOC_ERROR_PROTOCOL);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CURSOR = MONGOC_ERROR_CURSOR);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_QUERY = MONGOC_ERROR_QUERY);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_INSERT = MONGOC_ERROR_INSERT);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_SASL = MONGOC_ERROR_SASL);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_BSON = MONGOC_ERROR_BSON);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_MATCHER = MONGOC_ERROR_MATCHER);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_NAMESPACE = MONGOC_ERROR_NAMESPACE);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_COMMAND = MONGOC_ERROR_COMMAND);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_COLLECTION = MONGOC_ERROR_COLLECTION);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_GRIDFS = MONGOC_ERROR_GRIDFS);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_SCRAM = MONGOC_ERROR_SCRAM);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_SERVER_SELECTION = MONGOC_ERROR_SERVER_SELECTION);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_WRITE_CONCERN = MONGOC_ERROR_WRITE_CONCERN);

#if defined(MONGOC_ERROR_API_VERSION_2) && (MONGOC_ERROR_API_VERSION_2 == 2)
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_SERVER = MONGOC_ERROR_SERVER); /* Error API Version 2 only */
#endif // MONGOC_ERROR_API_VERSION_2

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_TRANSACTION = MONGOC_ERROR_TRANSACTION);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_SIDE_ENCRYPTION = MONGOC_ERROR_CLIENT_SIDE_ENCRYPTION); /* An error coming from libmongocrypt */
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_POOL = MONGOC_ERROR_POOL);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_AZURE = MONGOC_ERROR_AZURE);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_GCP = MONGOC_ERROR_GCP);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_DOMAIN_USER_EX = (MONGOC_ERROR_WRITE_CONCERN + 2));

};

struct mongoc_error_code_ex_t
{
private:
	typedef mongoc_error_code_ex_t this_type;

public:
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_STREAM_INVALID_TYPE = MONGOC_ERROR_STREAM_INVALID_TYPE);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_STREAM_INVALID_STATE = MONGOC_ERROR_STREAM_INVALID_STATE);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_STREAM_NAME_RESOLUTION = MONGOC_ERROR_STREAM_NAME_RESOLUTION);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_STREAM_SOCKET = MONGOC_ERROR_STREAM_SOCKET);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_STREAM_CONNECT = MONGOC_ERROR_STREAM_CONNECT);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_STREAM_NOT_ESTABLISHED = MONGOC_ERROR_STREAM_NOT_ESTABLISHED);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_NOT_READY = MONGOC_ERROR_CLIENT_NOT_READY);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_TOO_BIG = MONGOC_ERROR_CLIENT_TOO_BIG);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_TOO_SMALL = MONGOC_ERROR_CLIENT_TOO_SMALL);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_GETNONCE = MONGOC_ERROR_CLIENT_GETNONCE);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_AUTHENTICATE = MONGOC_ERROR_CLIENT_AUTHENTICATE);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_NO_ACCEPTABLE_PEER = MONGOC_ERROR_CLIENT_NO_ACCEPTABLE_PEER);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_IN_EXHAUST = MONGOC_ERROR_CLIENT_IN_EXHAUST);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_PROTOCOL_INVALID_REPLY = MONGOC_ERROR_PROTOCOL_INVALID_REPLY);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_PROTOCOL_BAD_WIRE_VERSION = MONGOC_ERROR_PROTOCOL_BAD_WIRE_VERSION);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CURSOR_INVALID_CURSOR = MONGOC_ERROR_CURSOR_INVALID_CURSOR);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_QUERY_FAILURE = MONGOC_ERROR_QUERY_FAILURE);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_BSON_INVALID = MONGOC_ERROR_BSON_INVALID);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_MATCHER_INVALID = MONGOC_ERROR_MATCHER_INVALID);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_NAMESPACE_INVALID = MONGOC_ERROR_NAMESPACE_INVALID);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_NAMESPACE_INVALID_FILTER_TYPE = MONGOC_ERROR_NAMESPACE_INVALID_FILTER_TYPE);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_COMMAND_INVALID_ARG = MONGOC_ERROR_COMMAND_INVALID_ARG);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_COLLECTION_INSERT_FAILED = MONGOC_ERROR_COLLECTION_INSERT_FAILED);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_COLLECTION_UPDATE_FAILED = MONGOC_ERROR_COLLECTION_UPDATE_FAILED);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_COLLECTION_DELETE_FAILED = MONGOC_ERROR_COLLECTION_DELETE_FAILED);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_COLLECTION_DOES_NOT_EXIST = MONGOC_ERROR_COLLECTION_DOES_NOT_EXIST);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_GRIDFS_INVALID_FILENAME = MONGOC_ERROR_GRIDFS_INVALID_FILENAME);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_SCRAM_NOT_DONE = MONGOC_ERROR_SCRAM_NOT_DONE);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_SCRAM_PROTOCOL_ERROR = MONGOC_ERROR_SCRAM_PROTOCOL_ERROR);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_QUERY_COMMAND_NOT_FOUND = MONGOC_ERROR_QUERY_COMMAND_NOT_FOUND);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_QUERY_NOT_TAILABLE = MONGOC_ERROR_QUERY_NOT_TAILABLE);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_SERVER_SELECTION_BAD_WIRE_VERSION = MONGOC_ERROR_SERVER_SELECTION_BAD_WIRE_VERSION);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_SERVER_SELECTION_FAILURE = MONGOC_ERROR_SERVER_SELECTION_FAILURE);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_SERVER_SELECTION_INVALID_ID = MONGOC_ERROR_SERVER_SELECTION_INVALID_ID);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_GRIDFS_CHUNK_MISSING = MONGOC_ERROR_GRIDFS_CHUNK_MISSING);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_GRIDFS_PROTOCOL_ERROR = MONGOC_ERROR_GRIDFS_PROTOCOL_ERROR);

	/* Dup with query failure. */
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_PROTOCOL_ERROR = MONGOC_ERROR_PROTOCOL_ERROR); // 17

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_WRITE_CONCERN_ERROR = MONGOC_ERROR_WRITE_CONCERN_ERROR); //64

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_DUPLICATE_KEY = MONGOC_ERROR_DUPLICATE_KEY); // 11000

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_MAX_TIME_MS_EXPIRED = MONGOC_ERROR_MAX_TIME_MS_EXPIRED); // 50

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CHANGE_STREAM_NO_RESUME_TOKEN = MONGOC_ERROR_CHANGE_STREAM_NO_RESUME_TOKEN);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_SESSION_FAILURE = MONGOC_ERROR_CLIENT_SESSION_FAILURE);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_TRANSACTION_INVALID_STATE = MONGOC_ERROR_TRANSACTION_INVALID_STATE);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_GRIDFS_CORRUPT = MONGOC_ERROR_GRIDFS_CORRUPT);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_GRIDFS_BUCKET_FILE_NOT_FOUND = MONGOC_ERROR_GRIDFS_BUCKET_FILE_NOT_FOUND);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_GRIDFS_BUCKET_STREAM = MONGOC_ERROR_GRIDFS_BUCKET_STREAM);

	/* An error related to initializing client side encryption. */
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_INVALID_ENCRYPTION_STATE = MONGOC_ERROR_CLIENT_INVALID_ENCRYPTION_STATE);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_INVALID_ENCRYPTION_ARG = MONGOC_ERROR_CLIENT_INVALID_ENCRYPTION_ARG);

	/* An error related to server version api */
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_API_ALREADY_SET = MONGOC_ERROR_CLIENT_API_ALREADY_SET);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_API_FROM_POOL = MONGOC_ERROR_CLIENT_API_FROM_POOL);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_POOL_API_ALREADY_SET = MONGOC_ERROR_POOL_API_ALREADY_SET);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_POOL_API_TOO_LATE = MONGOC_ERROR_POOL_API_TOO_LATE);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CLIENT_INVALID_LOAD_BALANCER = MONGOC_ERROR_CLIENT_INVALID_LOAD_BALANCER);

	/* An error related to either GCP metadata or Azure IMDS server */
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_KMS_SERVER_HTTP = MONGOC_ERROR_KMS_SERVER_HTTP);
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_KMS_SERVER_BAD_JSON = MONGOC_ERROR_KMS_SERVER_BAD_JSON);

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_CODE_USER_EX = (20000 + 2));

	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_EMPTY_OBJECT = (E_MONGOC_ERROR_CODE_USER_EX + 1));
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_DATABASE_DOES_NOT_EXIST = (E_MONGOC_ERROR_CODE_USER_EX + 2));
	YGGR_STATIC_CONSTANT(u32, E_MONGOC_ERROR_THREAD_PANIC = (E_MONGOC_ERROR_CODE_USER_EX + 3));

};

} // namespace nsql_database_system
} // namespace yggr

#endif // __YGGR_NSQL_DATABASE_SYSTEM_MONGOC_NATIVE_EX_HPP__
